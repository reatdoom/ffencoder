#!/bin/bash

#################### 防止程序重复执行 #############################

app=${0##*/}

if [ -f /var/run/$app.pid ]
then
    echo "The Process is Running! (Exit)"
    exit
else
    touch /var/run/$app.pid
fi

#################### 变量 #################### 

IFS=$(echo -ne "\n\b")

IP=192.168.211.41
PORT=23
USER=wxftpuser
PASS=wxftpuser
OUTPUT=/video/output
SUCC="226 Transfer complete."

#################### 函数 #################### 

function ExitProcess {
    exec 6>&-
    rm "/var/run/$app.pid"
    rm "$tmp_fifofile"
    rm "$pid_fifo"
    exit 0
}

function inspect {
    lsof $1
    status=$(echo $?)
}

function ftpup {
		
inspect $OUTPUT/$1
if [ $status -eq 0 ]
then
	echo "file is transfering!"
	return 0
fi

ftp -n -d -v <<!
open $IP $PORT
user $USER $PASS
binary
cd wmv入xcut
lcd $OUTPUT
prompt
put "$1"
close
bye
!

}

################### 创建FIFO文件 ##################################

tmp_fifofile="/dev/shm/$$.fifo"
pid_fifo="/dev/shm/$$_cpid.fifo"
mkfifo $tmp_fifofile
mkfifo $pid_fifo
exec 6<>$tmp_fifofile

################### 设置进程上限 ##################################
thread=1

for((i=0;i<$thread;i++));
do
    echo
done>&6
################### 信号处理 ##################################

trap ExitProcess SIGINT SIGTERM SIGQUIT

################### 程序主体 ######################################


for f in `ls $OUTPUT`
do
    read -u6
    {
        read <$pid_fifo cpid
        ftpup "$f" | tee $cpid.log >/dev/null
        RESULT=`grep -l "${SUCC}" $cpid.log`
        rm -rf $cpid.log

        if [ "${RESULT}" = "$cpid.log" ]
        then
            echo "$f 上传成功"
            echo "$f 上传成功" >>/var/log/scanftp.log
	        rm "$OUTPUT/$f"
        else
            echo "$f 上传失败"
            echo "$f 上传失败" >>/var/log/scanftp.log
        fi

        echo >&6
    }&

    sleep 1
    echo $!>$pid_fifo
done

wait

ExitProcess
